<?xml version="1.0" encoding="UTF-8"?>
<includes>
	<include name="VideoCodecFlagging">
		<control type="image">
			<description>Collection</description>
			<width>80</width>
			<height>35</height>
			<texture colordiffuse="ddffffff">flagging/videocodec/collection.png</texture>
			<visible>ListItem.IsCollection</visible>
		</control>
		<control type="image">
			<description>Video rez Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[ListItem.VideoResolution,flagging/videoresolution/,.png]</texture>
			<visible>!String.IsEmpty(ListItem.VideoResolution)</visible>
		</control>
		<control type="image">
			<description>Common Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[ListItem.VideoCodec,flagging/videocodec/,.png]</texture>
			<!-- Don't show if its one of the 500 divx codecs -->
			<visible>!String.IsEmpty(ListItem.VideoCodec) + ![String.StartsWith(ListItem.VideoCodec,div) | String.IsEqual(ListItem.VideoCodec,dx50)]</visible>
		</control>
		<control type="image">
			<description>Divx Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>flagging/videocodec/divx.png</texture>
			<visible>String.StartsWith(ListItem.VideoCodec,div) | String.IsEqual(ListItem.VideoCodec,dx50)</visible>
		</control>
	</include>
	<include name="AudioCodecFlagging">
		<control type="image">
			<description>Audio Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[ListItem.AudioCodec,flagging/audiocodec/,.png]</texture>
			<visible>!String.IsEmpty(ListItem.AudioCodec)</visible>
		</control>
		<control type="image">
			<description>Audio Channels Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[ListItem.AudioChannels,flagging/audiochannel/,.png]</texture>
			<visible>!String.IsEmpty(ListItem.AudioChannels)</visible>
		</control>
	</include>
	<include name="AspectCodecFlagging">
		<control type="image">
			<description>Aspectratio Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[ListItem.VideoAspect,flagging/aspectratio/,.png]</texture>
			<visible>!String.IsEmpty(ListItem.VideoAspect)</visible>
		</control>
	</include>
	<variable name="VideoCodecImage">
		<value condition="String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,brrip)">flagging/videocodec/bluray.png</value>
		<value condition="String.Contains(ListItem.FilenameAndPath,hddvd)">flagging/videocodec/hddvd.png</value>
		<value condition="String.Contains(ListItem.FilenameAndPath,dvd) | String.Contains(ListItem.FileExtension,img) | String.Contains(ListItem.FileExtension,ifo) | String.Contains(ListItem.FileExtension,vob)">flagging/videocodec/dvd.png</value>
		<value condition="String.Contains(ListItem.FilenameAndPath,pdtv) | String.Contains(ListItem.FilenameAndPath,hdtv) | String.Contains(ListItem.FilenameAndPath,dsr)">flagging/videocodec/tv.png</value>
		<value condition="String.Contains(ListItem.FilenameAndPath,vhs)">flagging/videocodec/vhs.png</value>
	</variable>
	<include name="VideoTypeHackFlaggingConditions">
		<control type="image">
			<description>Bluray Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$VAR[VideoCodecImage]</texture>
			<visible>String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,brrip) | String.Contains(ListItem.FilenameAndPath,hddvd) | String.Contains(ListItem.FilenameAndPath,dvd) | String.Contains(ListItem.FileExtension,img) | String.Contains(ListItem.FileExtension,ifo) | String.Contains(ListItem.FileExtension,vob) | String.Contains(ListItem.FilenameAndPath,pdtv) | String.Contains(ListItem.FilenameAndPath,hdtv) | String.Contains(ListItem.FilenameAndPath,dsr) | String.Contains(ListItem.FilenameAndPath,vhs)</visible>
		</control>
		<control type="image">
			<description>3D</description>
			<width>80</width>
			<height>35</height>
			<texture>flagging/videoresolution/3D.png</texture>
			<visible>ListItem.IsStereoscopic</visible>
		</control>
	</include>
	<variable name="AudioCodecImage">
		<value condition="String.EndsWith(ListItem.Filename,.mp3)">flagging/audiocodec/mp3.png</value>
		<value condition="String.EndsWith(ListItem.Filename,.wma)">flagging/audiocodec/wma.png</value>
		<value condition="String.EndsWith(ListItem.Filename,.aac) | String.EndsWith(ListItem.Filename,.m4a) | String.EndsWith(ListItem.Filename,.mp4)">flagging/audiocodec/aac.png</value>
		<value condition="String.EndsWith(ListItem.Filename,.flac)">flagging/audiocodec/flac.png</value>
		<value condition="String.EndsWith(ListItem.Filename,.ape)">flagging/audiocodec/ape.png</value>
		<value condition="String.EndsWith(ListItem.Filename,.ogg)">flagging/audiocodec/ogg.png</value>
	</variable>
	<include name="AudioTypeHackFlaggingConditions">
		<control type="image">
			<description>Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$VAR[AudioCodecImage]</texture>
			<visible>!String.IsEmpty(ListItem.Filename)</visible>
		</control>
		<control type="image">
			<description>Audio Channels Image</description>
			<width>80</width>
			<height>35</height>
			<aspectratio align="right">keep</aspectratio>
			<texture>$INFO[ListItem.MusicChannels,flagging/audiochannel/,.png]</texture>
			<visible>!String.IsEmpty(ListItem.MusicChannels)</visible>
		</control>
		<include content="CodecFlaggingImage">
			<param name="visible" value="!String.IsEmpty(ListItem.Bitrate)" />
			<param name="info" value="$INFO[ListItem.Bitrate,, kbps]" />
		</include>
		<include content="CodecFlaggingSmallImage">
			<param name="visible" value="!String.IsEmpty(ListItem.SampleRate)" />
			<param name="info" value="$INFO[ListItem.SampleRate,, kHz]" />
		</include>
		<include content="CodecFlaggingImage">
			<param name="visible" value="!String.IsEmpty(ListItem.Year)" />
			<param name="info" value="$INFO[ListItem.Year]" />
		</include>
		<include content="CodecFlaggingRating">
			<param name="visible" value="![String.IsEmpty(ListItem.Rating) + String.IsEmpty(ListItem.UserRating)]" />
			<param name="info" value="$VAR[StarRating]" />
		</include>
	</include>
	<include name="VideoPlayerVideoCodecFlagging">
		<control type="image" id="1">
			<description>Video rez Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[VideoPlayer.VideoResolution,flagging/videoresolution/,.png]</texture>
			<visible>!String.IsEmpty(VideoPlayer.VideoResolution)</visible>
		</control>
		<control type="image" id="1">
			<description>Common Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[VideoPlayer.VideoCodec,flagging/videocodec/,.png]</texture>
			<!-- Don't show if its one of the 500 divx codecs -->
			<visible>!String.IsEmpty(VideoPlayer.VideoCodec) + ![String.StartsWith(VideoPlayer.VideoCodec,div) | String.IsEqual(VideoPlayer.VideoCodec,dx50)]</visible>
		</control>
		<control type="image" id="1">
			<description>Divx Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>flagging/videocodec/divx.png</texture>
			<visible>String.StartsWith(VideoPlayer.VideoCodec,div) | String.IsEqual(VideoPlayer.VideoCodec,dx50)</visible>
		</control>
	</include>
	<include name="VideoPlayerAudioCodecFlagging">
		<control type="image" id="1">
			<description>Audio Codec Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[VideoPlayer.AudioCodec,flagging/audiocodec/,.png]</texture>
			<visible>!String.IsEmpty(VideoPlayer.AudioCodec)</visible>
		</control>
		<control type="image" id="1">
			<description>Audio Channels Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[VideoPlayer.AudioChannels,flagging/audiochannel/,.png]</texture>
			<visible>!String.IsEmpty(VideoPlayer.AudioChannels)</visible>
		</control>
	</include>
	<include name="VideoPlayerAspectCodecFlagging">
		<control type="image" id="1">
			<description>Aspectratio Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$INFO[VideoPlayer.VideoAspect,flagging/aspectratio/,.png]</texture>
			<visible>!String.IsEmpty(VideoPlayer.VideoAspect)</visible>
		</control>
	</include>
	<variable name="VideoPlayerCodecImage">
		<value condition="String.Contains(Player.FilenameAndPath,bluray) | String.Contains(Player.FilenameAndPath,bdrip) | String.Contains(Player.FilenameAndPath,brrip)">flagging/videocodec/bluray.png</value>
		<value condition="String.Contains(Player.FilenameAndPath,hddvd)">flagging/videocodec/hddvd.png</value>
		<value condition="String.Contains(Player.FilenameAndPath,dvd) | String.EndsWith(Player.FilenameAndPath,.img) | String.EndsWith(Player.FilenameAndPath,.ifo) | String.EndsWith(Player.FilenameAndPath,.vob)">flagging/videocodec/dvd.png</value>
		<value condition="String.Contains(Player.FilenameAndPath,pdtv) | String.Contains(Player.FilenameAndPath,hdtv) | String.Contains(Player.FilenameAndPath,dsr)">flagging/videocodec/tv.png</value>
		<value condition="String.Contains(Player.FilenameAndPath,vhs)">flagging/videocodec/vhs.png</value>
	</variable>
	<include name="VideoPlayerVideoTypeHackFlaggingConditions">
		<control type="image" id="1">
			<description>Bluray Image</description>
			<width>80</width>
			<height>35</height>
			<texture>$VAR[VideoPlayerCodecImage]</texture>
			<visible>String.Contains(Player.FilenameAndPath,bluray) | String.Contains(Player.FilenameAndPath,bdrip) | String.Contains(Player.FilenameAndPath,brrip) | String.Contains(Player.FilenameAndPath,hddvd) | String.Contains(Player.FilenameAndPath,dvd) | String.EndsWith(Player.FilenameAndPath,.img) | String.EndsWith(Player.FilenameAndPath,.ifo) | String.EndsWith(Player.FilenameAndPath,.vob) | String.Contains(Player.FilenameAndPath,pdtv) | String.Contains(Player.FilenameAndPath,hdtv) | String.Contains(Player.FilenameAndPath,dsr) | String.Contains(Player.FilenameAndPath,vhs)</visible>
		</control>
		<control type="image" id="1">
			<description>3D</description>
			<width>80</width>
			<height>35</height>
			<texture>flagging/videoresolution/3D.png</texture>
			<visible>VideoPlayer.IsStereoscopic</visible>
		</control>
	</include>

	<include name="PictureTypeHackFlaggingConditions">
		<control type="group">
			<visible>!String.IsEmpty(ListItem.Date)</visible>
			<animation effect="fade" end="80" condition="true">Conditional</animation>
			<width>100</width>
			<control type="image">
				<width>100</width>
				<height>35</height>
				<texture>flagging/blank.png</texture>
			</control>
			<control type="label">
				<left>10</left>
				<width>80</width>
				<height>35</height>
				<align>center</align>
				<aligny>center</aligny>
				<font>codecflagging</font>
				<textcolor>white</textcolor>
				<label>$INFO[ListItem.Date]</label>
			</control>
		</control>
		<control type="group">
			<visible>!String.IsEmpty(ListItem.PictureResolution)</visible>
			<animation effect="fade" end="80" condition="true">Conditional</animation>
			<width>100</width>
			<control type="image">
				<width>100</width>
				<height>35</height>
				<texture>flagging/blank.png</texture>
			</control>
			<control type="label">
				<left>10</left>
				<width>80</width>
				<height>35</height>
				<align>center</align>
				<aligny>center</aligny>
				<font>codecflagging</font>
				<textcolor>white</textcolor>
				<label>$INFO[ListItem.PictureResolution]</label>
			</control>
		</control>
	</include>
</includes>